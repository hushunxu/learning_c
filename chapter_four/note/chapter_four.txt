第4章 函数与程序结构

4.1函数的基本知识

函数定义：
  返回值类型 函数名(参数声明表)
  {
    声明和语句
  }

如果省略返回值，默认为int类型。

4.3外部变量

外部变量：可以全局范围内访问，在一次函数调用到下一次函数调用之间保持不变。

自动变量：只能在函数内部使用，从其所在的函数被调用时变量开始存在，在函数退出时变量也将消失。

4.4作用域规则

作用域指的是程序中变量存在的区域，超过该区域变量无法访问。

内部变量（局部变量），函数内生效。

外部变量（全局变量）或函数的作用域从声明它的地方开始，到其所在的文件末尾结束。

变量声明用于说明变量的属性（主要是变量的类型），变量的定义除此之外还将引起存储器的分配。

外部变量的定义必须制定数组的长度，但extern声明则不一定要制定数组的长度。

定义局部变量，系统不会初始化，需要自行对其初始化；

定义全局变量，系统会自动初始化，对应关系如下：
数据类型  初始化默认值
int	  0
char	  ''
float	  0
double	  0
pointer	  NULL

4.5头文件

#include

4.6静态变量

static关键字标识，在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。

声明：static int x;

4.7寄存器变量

register关键字标识，将register变量放在机器的寄存器中，可以使程序更小、执行速度更快。

声明：register  int  x;

4.8程序块结构

定义结构：struct

struct tag {
  member-list
  member-list
  member-list
} varible-list;

tag是结构体标签

member-list是标准的变量定义，如int

varible-list结构变量，定义在结构的末尾，最后一个分号之前

访问结构成员：.

4.9初始化

不进行显式初始化情况下，外部变量和静态变量都将被初始化为0，而自动变量和寄存器变量的初值没有定义。

对于外部变量与静态变量来说，初始化表达式必须是常量表达式，且只能初始化一次

对于自动变量与寄存器变量，则在每次进入函数或程序块时都将被初始化，初始化表达式可以不是常量表达式。

如果初始化表达式的个数比数组元素少，则对外部变量、静态变量和自动变量来说，没有初始化表达式的元素将被初始化为0，如果初始化表达式的个数比数组元素数多，则是错误的。

字符数组初始化比较特殊，可以用一个字符串代替花括号括起来并用逗号分隔的初始化表达式序列。如：

char parttern[] = "ould";

等同于char partter[] = {'o', 'u', 'l', 'd', '\0'};

此时，数组长度为5


4.10递归

递归：自己调用自己，一定要有一个跳出的机制。

快速排序：对于一个给定的数组，从中选择一个元素，以钙元素为界将其余元素划分为两个子集，一个子集中所有元素都小于该元素，另一个自己种所有元素

都大于或等于该元素。对这两个子集递归执行这一过程，当某个子集中的元素小于2时，这个子集就不需要再次排序，终止递归。

4.11C预处理器

#include 编译期间把指定文件的内容包含进当前文件中

  #include "文件名"  或 #include <文件名>

#define 用任意字符序列代替一个标记

  #define  名字 替换文本

   通常情况下，#define指令占一行，替换文本是#define指令尾部的所有剩余部分内容，但也可以把较长的宏定义为若干行，这是需要在待续的行末尾加一个反斜杠\。

   作用域：从其定义点开始，到被便衣的源文件的末尾处结束。

条件包含

   #if
   #endif
